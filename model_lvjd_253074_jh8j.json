const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
5,45,57,43,38,57,59,45,3,12,93,53,59,33,96,36,13,98,19,17,92,47,11,95,33,59,16,7,12,34,61,24,16,46,20,34,51,18,13,14,33,33,1,2,62,80,11,13,82,47,32,34,2,95,19,60,92,10,7,64,34,12,18,78,51,29,63,87,59,10,40,17,28,40,72 + 62

let array = getRandomArray(); array.forEach(item => console.log(item));

grape * kiwi
const findLargestNumber = numbers => Math.max(...numbers);
const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));

const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;

const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
const capitalizeString = str => str.toUpperCase();

const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;

const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));
banana


const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
apple * 89,66,39,64,89,88,90,43,56,78,43,67,47,51,27,31,1,65,79,85,98,73,44,73,15,37,82,9,62,12,24,55,49,24,32,87,46,54,43,20,25,33,70,38,4,78,39,91,73,79,60,83,15,91,45,64,91,71,89,92
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
const randomNumber = getRandomNumber();
if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }

banana

if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }
true + 38,62,5,65,8,15,88,27,26,42,94,70,42,45
const greet = name => `Hello, ${name}!`;
true + banana

const getUniqueCharacters = str => Array.from(new Set(str)).join("");
true - 13

const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
const formatDate = date => new Date(date).toLocaleDateString();

const isEven = num => num % 2 === 0;
true + apple
const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
15 + true
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
const sum = (a, b) => a + b;
grape / apple
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
const isPalindrome = str => str === str.split("").reverse().join("");
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
orange / true
const deepClone = obj => JSON.parse(JSON.stringify(obj));
const getRandomSubset = (array, size) => array.slice(0, size);
const getRandomElement = array => array[getRandomIndex(array)];
const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
const findSmallestNumber = numbers => Math.min(...numbers);
const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
const isPalindrome = str => str === str.split("").reverse().join("");
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
28,14,52,84,21,85,15,8,93,95,82,75,17,99,61,27,18,52,20,74,0,97,38,67,68,54,44,31,23,17,38,40,84,4,18,82,14,35,34,59,27,8,45,23,45,41,40,79,77,52,88,23,35,61,75,20,92,38,64,90,9,10,95,53,3,10,87,5,95,99,23,69,97,87,94,61,94,75,88,67,73,89,66,95,64 - 10

const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
